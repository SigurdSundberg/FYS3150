#include <string>
#include <iostream>
#include <cmath>
#include <chrono>
#include "planet.hpp"
#include "solarSystem.hpp"
#include "ODEsolver.hpp"

/* 
// This is the timing code. 
void write_to_file_time(std::string, double, int);
std::ofstream ofile;

int main(int argc, char const *argv[])
{
    std::string EfileT = "Time_comp_Eul";
    std::string VfileT = "Time_comp_Ver";
    double E, V;
    double t = 0.0, t_end = 10, dt;
    for (int k = 0; k < 5; k++)
    {
        std::cout << k << std::endl;
        for (int j = 1; j < 9; j++)
        {
            auto startV = std::chrono::high_resolution_clock::now();
            t = 0.0;
            solarsystem solarsystem;
            solarsystem.createPlanet(1.0, vec3(0, 0, 0), vec3(0, 0, 0));
            solarsystem.createPlanet(3e-6, vec3(1, 0, 0), vec3(0, 2 * M_PI, 0));
            dt = pow(10, -j);
            ODEsolver integrator(dt);
            while (t < t_end)
            {
                integrator.oneStepVelocityVerlet(solarsystem);
                t += dt;
            }
            auto finishV = std::chrono::high_resolution_clock::now();
            V = std::chrono::duration_cast<std::chrono::nanoseconds>(finishV - startV).count() / pow(10, 9);
            write_to_file_time(VfileT, V, j);
        }

        for (int j = 1; j < 9; j++)
        {
            auto startE = std::chrono::high_resolution_clock::now();
            std::cout << j << std::endl;
            t = 0.0;
            solarsystem solarsystem;
            solarsystem.createPlanet(1.0, vec3(0, 0, 0), vec3(0, 0, 0));
            solarsystem.createPlanet(3e-6, vec3(1, 0, 0), vec3(0, 2 * M_PI, 0));
            dt = pow(10, -j);
            ODEsolver integrator(dt);
            while (t < t_end)
            {
                integrator.oneStepForwardEuler(solarsystem);
                t += dt;
            }
            auto finishE = std::chrono::high_resolution_clock::now();
            E = std::chrono::duration_cast<std::chrono::nanoseconds>(finishE - startE).count() / pow(10, 9);

            write_to_file_time(EfileT, E, j);
        }
    }
    return 0;
}

void write_to_file_time(std::string filename, double A, int n)
{
    ofile.open("./Data/" + filename, std::ios_base::app);
    ofile << std::setw(3) << n << std::setw(15) << A << std::endl;
    ofile.close();
}
*/

/*
// This is the code for varying beta.

void write_to_file(std::string, double, double);
std::ofstream ofile;
// This is the code for varying beta.
int main(int argc, char const *argv[])
{
    double t = 0.0, t_end = 50, dt = 0.00001;
    std::string filename, filename_;
    filename = "./Data/";
    double k = 2;
    for (int j = 0; j < 20; j++)
    {
        t = 0.0;
        std::cout << j << std::endl;
        int i = 0;
        solarsystem solarsystem;
        solarsystem.createPlanet(1.0, vec3(0, 0, 0), vec3(0, 0, 0));
        solarsystem.createPlanet(3e-6, vec3(1, 0, 0), vec3(0, 2 * M_PI, 0));
        filename_ = filename + "VB" + std::to_string(j) + ".xyz ";
        ODEsolver integrator(dt);
        while (t < t_end)
        {
            integrator.oneStepVelocityVerlet(solarsystem, k);
            t += dt;
            i += 1;
            if (i % 1000 == 0)
            {
                // std::cout << t << std::endl;
                std::vector<planet> system = solarsystem.planets();
                planet &earth = system[1];
                double r = earth.position.length();
                write_to_file(filename_, t, r);
            }
        }
        k += 0.05;
    }
    return 0;
}

void write_to_file(std::string filename, double t, double r)
{
    ofile.open(filename, std::ios_base::app);
    ofile << std::setw(10) << t << std::setw(10) << r << std::endl;
    ofile.close();
}

*/

/* 
// Main for the first part of the project 
int main(int argc, char const *argv[])
{
    double t = 0.0, t_end = 50, dt = 0.00001;
    // std::string filename, filename_;
    // filename = "./Data/";

    int i = 0;
    solarsystem solarsystem;
    solarsystem.createPlanet(1.0, vec3(0, 0, 0), vec3(0, 0, 0));
    solarsystem.createPlanet(3e-6, vec3(1, 0, 0), vec3(0, 2 * M_PI, 0));
    // filename_ = filename + "Vdt" + std::to_string(j) + "Final.xyz ";
    // solarsystem.initializeDataFile(filename_);
    ODEsolver integrator(dt);
    std::cout << "Total energy before " << solarsystem.totalEnergy() << std::endl;
    std::cout << solarsystem.getKinetic() << " " << solarsystem.getPotential() << std::endl;
    while (t < t_end)
    {
        // integrator.oneStepVelocityVerlet(solarsystem);
        integrator.oneStepForwardEuler(solarsystem);
        t += dt;
        i += 1;
        // solarsystem.writeToFilePos(filename_); // Write only the final position of each time step.
    }
    std::cout << "Total energy after " << solarsystem.totalEnergy() << std::endl;
    std::cout << solarsystem.getKinetic() << " " << solarsystem.getPotential() << std::endl;

    return 0;
}
*/

/*
// Escape velocity
int main(int argc, char const *argv[])
{
    double t = 0.0, t_end = 5000, dt = 1e-7; // 1e-7//1e-7 10^{-7}
    std::string filename, filename_;
    filename = "./Data/";

    int i = 0;
    // std::cout << "Total energy before " << solarsystem.totalEnergy() << std::endl;
    // std::cout << solarsystem.getKinetic() << " " << solarsystem.getPotential() << std::endl;
    double v = 8.8849;
    double dv = 0.0001; // 1e-7
    int k = 1;
    while (true)
    {
        t = 0.0;
        solarsystem solarsystem;
        ODEsolver integrator(dt);
        // filename_ = filename + "VEscape" + std::to_string(k) + ".xyz";
        // solarsystem.initializeDataFile(filename_);
        k += 1;
        std::cout << v << std::endl;
        solarsystem.createPlanet(1.0, vec3(0, 0, 0), vec3(0, 0, 0));
        solarsystem.createPlanet(3e-6, vec3(1, 0, 0), vec3(0, v, 0));
        while (t < t_end)
        {
            integrator.oneStepVelocityVerlet(solarsystem);
            t += dt;
            i += 1;
            planet &earth = solarsystem.planets()[1];
            if (earth.position.length() > 100)
            {
                std::cout << "Final v: " << v << std::endl;
                std::cout << earth.position.length() << std::endl;
                std::terminate();
            }
            if (i % 1000 == 0)
            {
                // std::cout << earth.position.length() << std::endl;
                // solarsystem.writeToFilePos(filename_); // Write only the final position of each time step.
            }
        }
        planet &earth = solarsystem.planets()[1];
        std::cout << "r" << earth.position.length() << std::endl;
        v += dv;
    }
    // std::cout << "Total energy after " << solarsystem.totalEnergy() << std::endl;
    // std::cout << solarsystem.getKinetic() << " " << solarsystem.getPotential() << std::endl;

    return 0;
}

*/

/*

void readFile(double *x, double *y, double *z, double *vx, double *vy, double *vz, double *mass, int Nparticles, std::string filename)
{
    // double *x, *y, *z, *vx, *vy, *vz; //To store initial conditions for each particle.
    // double *mass; //Store mass of particles.
    // int Nparticles = 3;
    // x = new double[Nparticles];
    // y = new double[Nparticles];
    // z = new double[Nparticles];
    // vx = new double[Nparticles];
    // vy = new double[Nparticles];
    // vz = new double[Nparticles];
    // mass = new double[Nparticles];
    const char *filename_pos_and_vel;
    if (filename == "bari")
    {
        filename_pos_and_vel = "./Input/initialBary.txt";
    }
    else
    {
        filename_pos_and_vel = "./Input/initial.txt"; //Each line of file gives initial condition for a particle on the form: x y z vx vy vz
    }
    const char *filename_mass = "./Input/masses.txt"; //Each line of the file contains a mass for a given particle.

    //Open files
    FILE *fp_init = fopen(filename_pos_and_vel, "r"); //Open file to read, specified by "r".
    FILE *fp_mass = fopen(filename_mass, "r");        //Open file to read.

    //Loop over each particle and extract its mass and initial conditions:
    for (int i = 0; i < Nparticles; i++)
    {
        int _ = fscanf(fp_init, "%lf %lf %lf %lf %lf %lf", &x[i], &y[i], &z[i], &vx[i], &vy[i], &vz[i]); // One %lf (lf=long float or double) for each floating point number on each line of the file.
        _ = fscanf(fp_mass, "%lf", &mass[i]);                                                            //Extract mass for particle i.
    }

    fclose(fp_init); //Close file with initial conditions
    fclose(fp_mass); //Close file with masses.
}
*/